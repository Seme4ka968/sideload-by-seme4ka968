--[=[ d888b db db d888888b .d888b. db db db .d8b. 88' Y8b 88 88 `88' VP `8D 88 88 88 d8' `8b 88 88 88 88 odD' 88 88 88 88ooo88 88 ooo 88 88 88 .88' 88 88 88 88~~~88 88. ~8~ 88b d88 .88. j88. 88booo.
88b d88 88 88 Y888P ~Y8888P' Y888888P 888888D Y88888P ~Y8888P' YP YP CONVERTER ]=] -- Instances: 33 | Scripts: 3 | Modules: 3
local G2L = {};
-- StarterGui.Arlock Sideload
G2L["1"] = Instance.new("ScreenGui", game:GetService('CoreGui'):WaitForChild('RobloxGui'));
G2L["1"]["Name"] = [[Arlock Sideload]];
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
G2L["1"]["ResetOnSpawn"] = false;
-- StarterGui.Arlock Sideload.Frame
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2"]["Size"] = UDim2.new(0, 482, 0, 276);
G2L["2"]["Position"] = UDim2.new(0.27320125699043274, 0, 0.3018597960472107, 0);
-- StarterGui.Arlock Sideload.Frame.UIStroke
G2L["3"] = Instance.new("UIStroke", G2L["2"]);
G2L["3"]["Color"] = Color3.fromRGB(255, 255, 255);
-- StarterGui.Arlock Sideload.Frame.UIStroke.UIGradient
G2L["4"] = Instance.new("UIGradient", G2L["3"]);
G2L["4"]["Rotation"] = 50;
G2L["4"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 0, 255))};
-- StarterGui.Arlock Sideload.Frame.UICorner
G2L["5"] = Instance.new("UICorner", G2L["2"]);
-- StarterGui.Arlock Sideload.Frame.Executor
G2L["6"] = Instance.new("Folder", G2L["2"]);
G2L["6"]["Name"] = [[Executor]];
-- StarterGui.Arlock Sideload.Frame.Executor.Execute
G2L["7"] = Instance.new("Frame", G2L["6"]);
G2L["7"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["BackgroundTransparency"] = 1;
G2L["7"]["Size"] = UDim2.new(0, 290, 0, 28);
G2L["7"]["Position"] = UDim2.new(0.02169983461499214, 0, 0.8708109259605408, 0);
G2L["7"]["Name"] = [[Execute]];
-- StarterGui.Arlock Sideload.Frame.Executor.Execute.Button
G2L["8"] = Instance.new("TextButton", G2L["7"]);
G2L["8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["8"]["TextSize"] = 22;
G2L["8"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["8"]["TextColor3"] = Color3.fromRGB(51, 215, 0);
G2L["8"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["8"]["Name"] = [[Button]];
G2L["8"]["Text"] = [[Execute]];
G2L["8"]["BackgroundTransparency"] = 1;
-- StarterGui.Arlock Sideload.Frame.Executor.Execute.UICorner
G2L["9"] = Instance.new("UICorner", G2L["7"]);
-- StarterGui.Arlock Sideload.Frame.Executor.Execute.UIStroke
G2L["a"] = Instance.new("UIStroke", G2L["7"]);
G2L["a"]["Color"] = Color3.fromRGB(51, 215, 0);
-- StarterGui.Arlock Sideload.Frame.Executor.Clear
G2L["b"] = Instance.new("Frame", G2L["6"]);
G2L["b"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b"]["BackgroundTransparency"] = 1;
G2L["b"]["Size"] = UDim2.new(0, 162, 0, 28);
G2L["b"]["Position"] = UDim2.new(0.6400582790374756, 0, 0.8708109855651855, 0);
G2L["b"]["Name"] = [[Clear]];
-- StarterGui.Arlock Sideload.Frame.Executor.Clear.Button
G2L["c"] = Instance.new("TextButton", G2L["b"]);
G2L["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c"]["TextSize"] = 22;
G2L["c"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["c"]["TextColor3"] = Color3.fromRGB(36, 236, 203);
G2L["c"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["c"]["Name"] = [[Button]];
G2L["c"]["Text"] = [[Clear]];
G2L["c"]["BackgroundTransparency"] = 1;
-- StarterGui.Arlock Sideload.Frame.Executor.Clear.UICorner
G2L["d"] = Instance.new("UICorner", G2L["b"]);
-- StarterGui.Arlock Sideload.Frame.Executor.Clear.UIStroke
G2L["e"] = Instance.new("UIStroke", G2L["b"]);
G2L["e"]["Color"] = Color3.fromRGB(36, 236, 203);
-- StarterGui.Arlock Sideload.Frame.Executor.ExecutorBox
G2L["f"] = Instance.new("Frame", G2L["6"]);
G2L["f"]["BackgroundColor3"] = Color3.fromRGB(22, 22, 22);
G2L["f"]["Size"] = UDim2.new(0, 462, 0, 163);
G2L["f"]["Position"] = UDim2.new(0.01962907239794731, 0, 0.24310137331485748, 0);
G2L["f"]["Name"] = [[ExecutorBox]];
-- StarterGui.Arlock Sideload.Frame.Executor.ExecutorBox.UICorner
G2L["10"] = Instance.new("UICorner", G2L["f"]);
-- StarterGui.Arlock Sideload.Frame.Executor.ExecutorBox.TextBox
G2L["11"] = Instance.new("TextBox", G2L["f"]);
G2L["11"]["TextSize"] = 14;
G2L["11"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["11"]["TextWrapped"] = true;
G2L["11"]["TextYAlignment"] = Enum.TextYAlignment.Top;
G2L["11"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["11"]["TextColor3"] = Color3.fromRGB(198, 119, 88);
G2L["11"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["11"]["MultiLine"] = true;
G2L["11"]["BackgroundTransparency"] = 1;
G2L["11"]["PlaceholderText"] = [[require(6666666).load("c00lkidd")]];
G2L["11"]["Size"] = UDim2.new(0, 448, 0, 150);
G2L["11"]["Text"] = [[]];
G2L["11"]["Position"] = UDim2.new(0.015692640095949173, 0, 0.042270027101039886, 0);
G2L["11"]["ClearTextOnFocus"] = false;
-- StarterGui.Arlock Sideload.Frame.Executor.ExecutorBox.TextBox.Highlight
G2L["12"] = Instance.new("LocalScript", G2L["11"]);
G2L["12"]["Name"] = [[Highlight]];
-- StarterGui.Arlock Sideload.Frame.Executor.ExecutorBox.TextBox.Highlight.Highlighter
G2L["13"] = Instance.new("ModuleScript", G2L["12"]);
G2L["13"]["Name"] = [[Highlighter]];
-- StarterGui.Arlock Sideload.Frame.Executor.ExecutorBox.TextBox.Highlight.Highlighter.lexer
G2L["14"] = Instance.new("ModuleScript", G2L["13"]);
G2L["14"]["Name"] = [[lexer]];
-- StarterGui.Arlock Sideload.Frame.Executor.ExecutorBox.TextBox.Highlight.Highlighter.lexer.language
G2L["15"] = Instance.new("ModuleScript", G2L["14"]);
G2L["15"]["Name"] = [[language]];
-- StarterGui.Arlock Sideload.Frame.Scanner
G2L["16"] = Instance.new("Frame", G2L["2"]);
G2L["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["16"]["BackgroundTransparency"] = 1;
G2L["16"]["Size"] = UDim2.new(0, 370, 0, 107);
G2L["16"]["Position"] = UDim2.new(0.1166670024394989, 0, 0.30478382110595703, 0);
G2L["16"]["Visible"] = false;
G2L["16"]["Name"] = [[Scanner]];
-- StarterGui.Arlock Sideload.Frame.Scanner.UIStroke
G2L["17"] = Instance.new("UIStroke", G2L["16"]);
G2L["17"]["Color"] = Color3.fromRGB(255, 255, 255);
-- StarterGui.Arlock Sideload.Frame.Scanner.UIStroke.UIGradient
G2L["18"] = Instance.new("UIGradient", G2L["17"]);
G2L["18"]["Rotation"] = 50;
G2L["18"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 108)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 231, 171))};
-- StarterGui.Arlock Sideload.Frame.Scanner.UICorner
G2L["19"] = Instance.new("UICorner", G2L["16"]);
-- StarterGui.Arlock Sideload.Frame.Scanner.Button
G2L["1a"] = Instance.new("TextButton", G2L["16"]);
G2L["1a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1a"]["TextSize"] = 43;
G2L["1a"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1a"]["Size"] = UDim2.new(1, 0, 1, 0);
G2L["1a"]["Name"] = [[Button]];
G2L["1a"]["Text"] = [[Start Scanning]];
G2L["1a"]["BackgroundTransparency"] = 1;
-- StarterGui.Arlock Sideload.Frame.Scanner.Button.UIGradient
G2L["1b"] = Instance.new("UIGradient", G2L["1a"]);
G2L["1b"]["Rotation"] = 50;
G2L["1b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 108)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(255, 231, 171))};
-- StarterGui.Arlock Sideload.Frame.Scanner.Button.UIStroke
G2L["1c"] = Instance.new("UIStroke", G2L["1a"]);
G2L["1c"]["Color"] = Color3.fromRGB(255, 255, 255);
-- StarterGui.Arlock Sideload.Frame.TextLabel
G2L["1d"] = Instance.new("TextLabel", G2L["2"]);
G2L["1d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1d"]["FontFace"] = Font.new([[rbxassetid://12187365977]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["1d"]["TextSize"] = 49;
G2L["1d"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1d"]["Size"] = UDim2.new(0, 460, 0, 50);
G2L["1d"]["Text"] = [[Arlock Sideload]];
G2L["1d"]["BackgroundTransparency"] = 1;
G2L["1d"]["Position"] = UDim2.new(0.02169983461499214, 0, 0.025362318381667137, 0);
-- StarterGui.Arlock Sideload.Frame.TextLabel.UIStroke
G2L["1e"] = Instance.new("UIStroke", G2L["1d"]);
G2L["1e"]["Color"] = Color3.fromRGB(255, 255, 255);
-- StarterGui.Arlock Sideload.LocalScript
G2L["20"] = Instance.new("LocalScript", G2L["1"]);
-- StarterGui.Arlock Sideload.Dragify
G2L["21"] = Instance.new("LocalScript", G2L["1"]);
G2L["21"]["Name"] = [[Dragify]];
-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L["13"]] = { Closure = function()
local script = G2L["13"];
--[[ export type HighlighterColors = { [string]: Color3 } export type TextObject = TextLabel | TextBox export type HighlightProps = { textObject: TextObject, src: string?, forceUpdate: boolean?, lexer: Lexer?, customLang: { [string]: string }? } export type Lexer = { scan: (src: string) -> () -> (string, string), navigator: () -> any, finished: boolean?, } export type Highlighter = { defaultLexer: Lexer, setTokenColors: (colors: HighlighterColors?) -> (), highlight: (props: HighlightProps) -> (() -> ())?, refresh: () -> (), } export type ObjectData = { Text: string, Labels: { TextLabel }, Lines: { string }, Lexer: Lexer?, CustomLang: { [string]: string }?, } --]]
local function SanitizeRichText(s: string): string
    return string.gsub( string.gsub(string.gsub(string.gsub(string.gsub(s, "&", "&"), "<", "<"), ">", ">"), '"', '"'), "'", "'")
end
local function SanitizeTabs(s: string): string
    return string.gsub(s, "\t", " ")
end
local function SanitizeControl(s: string): string
    return string.gsub(s, "[\0\1\2\3\4\5\6\7\8\11\12\13\14\15\16\17\18\19\20\21\22\23\24\25\26\27\28\29\30\31]+", "")
end
local TokenColors: HighlighterColors = {
    ["background"] = Color3.fromRGB(47, 47, 47),
    ["iden"] = Color3.fromRGB(234, 234, 234),
    ["keyword"] = Color3.fromRGB(215, 174, 255),
    ["builtin"] = Color3.fromRGB(131, 206, 255),
    ["string"] = Color3.fromRGB(196, 255, 193),
    ["number"] = Color3.fromRGB(255, 125, 125),
    ["comment"] = Color3.fromRGB(140, 140, 155),
    ["operator"] = Color3.fromRGB(255, 239, 148),
    ["custom"] = Color3.fromRGB(119, 122, 255),
}
local ColorFormatter: { [Color3]: string } = {}
local LastData: { [TextObject]: ObjectData } = {}
local Cleanups: { [TextObject]: () -> () } = {}
local Highlighter = { defaultLexer = require(script.lexer), }
function Highlighter.highlight(props: HighlightProps)
    -- Gather props
    local textObject = props.textObject
    local src = SanitizeTabs(SanitizeControl(props.src or textObject.Text))
    local lexer = props.lexer or Highlighter.defaultLexer
    local customLang = props.customLang
    local forceUpdate = props.forceUpdate
    -- Avoid updating when unnecessary
    local data = LastData[textObject]
    if data == nil then
        data = { Text = "", Labels = {}, Lines = {}, Lexer = lexer, CustomLang = customLang, }
        LastData[textObject] = data
    elseif forceUpdate ~= true and data.Text == src then return end
    local lineLabels = data.Labels
    local previousLines = data.Lines
    local lines = string.split(src, "\n")
    data.Lines = lines
    data.Text = src
    data.Lexer = lexer
    data.CustomLang = customLang
    -- Ensure valid object properties
    textObject.RichText = false
    textObject.Text = src
    textObject.TextXAlignment = Enum.TextXAlignment.Left
    textObject.TextYAlignment = Enum.TextYAlignment.Top
    textObject.BackgroundColor3 = TokenColors.background
    textObject.TextColor3 = TokenColors.iden
    textObject.TextTransparency = 0.5
    -- Build the highlight labels
    local lineFolder = textObject:FindFirstChild("SyntaxHighlights")
    if lineFolder == nil then
        local newLineFolder = Instance.new("Folder")
        newLineFolder.Name = "SyntaxHighlights"
        newLineFolder.Parent = textObject
        lineFolder = newLineFolder
    end
    -- Add a cleanup handler for this textObject
    local cleanup = Cleanups[textObject]
    if not cleanup then
        local connections: { RBXScriptConnection } = {}
        local function newCleanup()
            for _, label in ipairs(lineLabels) do label:Destroy() end
            table.clear(lineLabels)
            lineLabels = nil
            LastData[textObject] = nil
            Cleanups[textObject] = nil
            for _, connection in connections do connection:Disconnect() end
            table.clear(connections)
            connections = nil
        end
        Cleanups[textObject] = newCleanup
        cleanup = newCleanup
        table.insert(
            connections,
            textObject.AncestryChanged:Connect(function() if textObject.Parent then return end cleanup() end)
        )
        table.insert(
            connections,
            textObject:GetPropertyChangedSignal("TextBounds"):Connect(function() Highlighter.highlight({ textObject = textObject, forceUpdate = true, lexer = lexer, customLang = customLang, }) end)
        )
        table.insert(
            connections,
            textObject:GetPropertyChangedSignal("Text"):Connect(function() Highlighter.highlight({ textObject = textObject, lexer = lexer, customLang = customLang, }) end)
        )
        table.insert(
            connections,
            textObject:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() Highlighter.highlight({ textObject = textObject, forceUpdate = true, lexer = lexer, customLang = customLang, }) end)
        )
    end
    -- Shortcut empty labels
    if src == "" then
        for l=1, #lineLabels do if lineLabels[l].Text == "" then continue end lineLabels[l].Text = "" end
        return cleanup
    end
    -- Wait for TextBounds to be non-NaN and non-zero because Roblox
    local textBounds = textObject.TextBounds
    while (textBounds.Y ~= textBounds.Y) or (textBounds.Y < 1) do task.wait() textBounds = textObject.TextBounds end
    if LastData[textObject] == nil then -- Got cleaned up while we were waiting
        return cleanup
    end
    local numLines = #lines
    local textHeight = textBounds.Y / numLines * textObject.LineHeight
    local richText, index, lineNumber = table.create(5), 0, 1
    for token: string, content: string in lexer.scan(src) do
        local Color = if customLang and customLang[content] then TokenColors["custom"] else TokenColors[token] or TokenColors["iden"]
        local tokenLines = string.split(SanitizeRichText(content), "\n")
        for l, line in ipairs(tokenLines) do
            -- Find line label
            local lineLabel = lineLabels[lineNumber]
            if not lineLabel then
                local newLabel = Instance.new("TextLabel")
                newLabel.Name = "Line_" ..
